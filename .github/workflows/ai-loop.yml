name: AI Loop (Plan â†” Implement)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "planning or implementation"
        required: false
        default: "auto"
      max_prs:
        description: "Maximum PRs to open per run (default 20)"
        required: false
        default: "20"
      sleep_seconds:
        description: "Seconds to sleep between iterations (default 30)"
        required: false
        default: "30"

permissions:
  contents: write
  pull-requests: write

jobs:
  loop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Decide mode
        id: mode
        run: |
          if [ "${{ github.event.inputs.mode }}" = "planning" ]; then echo "mode=planning" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [ "${{ github.event.inputs.mode }}" = "implementation" ]; then echo "mode=implementation" >> "$GITHUB_OUTPUT"; exit 0; fi
          # AUTO: if there are no open PRs from ai/*, plan; else implement
          OPEN=$(gh pr list --search "head:ai/* state:open" --json number | jq 'length')
          if [ "$OPEN" -eq 0 ]; then echo "mode=planning" >> "$GITHUB_OUTPUT"; else echo "mode=implementation" >> "$GITHUB_OUTPUT"; fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cursor CLI
        run: curl https://cursor.com/install -fsSL | bash
        # adds `cursor-agent` to PATH
        # Ref: official blog announcement
      - name: Run loop up to max PRs
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          chmod +x scripts/*.sh

          MAX="${{ github.event.inputs.max_prs }}"; if [ -z "${MAX}" ]; then MAX=20; fi
          SLEEP="${{ github.event.inputs.sleep_seconds }}"; if [ -z "${SLEEP}" ]; then SLEEP=30; fi

          i=0
          while [ "$i" -lt "$MAX" ]; do
            OPEN=$(gh pr list --search "head:ai/* state:open" --json number | jq 'length')
            if [ "$OPEN" -eq 0 ]; then
              # No open AI PRs: alternate between planning and implementation based on last merged AI PR
              LAST_JSON=$(gh pr list --search "head:ai/*" --state merged --json title,labels,mergedAt --limit 50 | jq 'sort_by(.mergedAt) | last')
              NEXT_MODE="planning"
              if [ "${LAST_JSON}" != "null" ]; then
                if echo "${LAST_JSON}" | jq -r '.labels[].name // empty' | grep -q '^ai:planning$'; then
                  NEXT_MODE="implementation"
                elif echo "${LAST_JSON}" | jq -r '.labels[].name // empty' | grep -q '^ai:implementation$'; then
                  NEXT_MODE="planning"
                else
                  # Fall back to title prefix if labels are missing
                  TITLE=$(echo "${LAST_JSON}" | jq -r '.title // ""')
                  if echo "$TITLE" | grep -q '^\[PLAN\]'; then
                    NEXT_MODE="implementation"
                  elif echo "$TITLE" | grep -q '^\[IMPL\]'; then
                    NEXT_MODE="planning"
                  fi
                fi
              fi

              if [ "$NEXT_MODE" = "planning" ]; then
                echo "[AI LOOP] Mode: planning (no open PRs)"
                ./scripts/ai-plan.sh || true
              else
                echo "[AI LOOP] Mode: implementation (no open PRs; alternating)"
                ./scripts/ai-implement.sh || true
              fi
            else
              echo "[AI LOOP] Mode: implementation (open PR detected)"
              # Pass the open AI PR URL to the implementation script so it updates the existing PR
              OPEN_URL=$(gh pr list --search "head:ai/* state:open" --json url --jq '.[0].url')
              ./scripts/ai-implement.sh "${OPEN_URL}" || true
            fi

            i=$((i+1))
            echo "[AI LOOP] Iteration $i/$MAX complete. Sleeping $SLEEP seconds..."
            sleep "$SLEEP"
          done
